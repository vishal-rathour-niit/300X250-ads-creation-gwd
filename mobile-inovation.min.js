
/*
	developed by :  vishal rathour,
	version : 1.0.3
	for : ads manage
*/


class TemplateWrapper extends HTMLElement {
	constructor() {
		super()
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height"]
	}
	connectedCallback() {
		this.rendered || (this.render(), this.rendered = !0)
	}
	attributeChangedCallback(name, oldValue, newValue) {
		if (oldValue !== newValue) {
			this.render();
		}
	}
	render() {
		this.className = "inovation-ads-wrapper"
	}
}
class TemplateDefault extends HTMLElement {
	constructor() {
		super()
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height"]
	}
	connectedCallback() {
		this.rendered || (this.render(), this.rendered = !0)
	}
	attributeChangedCallback(name, oldValue, newValue) {
		if (oldValue !== newValue) {
			this.render();
		}
	}
	render() {
		const width = this.getAttribute("width") || "300px";
		const height = this.getAttribute("height") || "100px";
		if (this.style.width !== `${width}`) {this.style.width = `${width}`;}
		if (this.style.height !== `${height}`) {this.style.height = `${height}`;}
	}
}
class TemplateExpand extends HTMLElement {
	constructor() {
		super();
		this.rendered = false; // Initialize the rendered flag
	}

	static get observedAttributes() {
		return ["width", "height","id","class"];
	}

	connectedCallback() {
		if (!this.rendered) {
			this.render();
			this.rendered = true;
		}
	}

	attributeChangedCallback(name, oldValue, newValue) {
		if (oldValue !== newValue) {
			this.render();
		}
	}

	render() {
		const width = this.getAttribute("width") || "300px";
		const height = this.getAttribute("height") || "250px";
		if (this.style.width !== `${width}`) {this.style.width = `${width}`;}
		if (this.style.height !== `${height}`) {this.style.height = `${height}`;}
	}
}


class TemplateImage extends HTMLElement {
	constructor() {
		super()
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height", "image-src"]
	}
	connectedCallback() {
		this.rendered || (this.render(), this.rendered = !0)
	}
	attributeChangedCallback(t, e, i) {
		this.render()
	}
	checkPreImages() {
		let t = this.querySelector("img");
		t && t.remove()
	}
	render() {
		let t = this.getAttribute("image-src");
		if (this.addEventListener("click", (t => {
				t.stopPropagation()
			})), this.parent = this.closest(".ads-view"), t) {
			this.setAttribute("type", "image"), this.checkPreImages();
			let e = document.createElement("img"),
				i = new Image;
			i.src = t, i.addEventListener("load", (() => {
				this.style.width = i.width + "px", this.style.height = i.height + "px", this.parent && (this.parent.setAttribute("width", i.width + "px"), this.parent.setAttribute("height", i.height + "px"))
			})), e.src = t, this.appendChild(e)
		}
	}
}
class TemplateButton extends HTMLElement {
	constructor() {
		super()
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height", "type", "text"]
	}
	connectedCallback() {
		this.rendered || (this.render(), this.rendered = !0)
	}
	attributeChangedCallback(t, e, i) {
		this.render()
	}
	render() {
		this.innerHTML = "";
		let t = this.getAttribute("type"),
			e = this.getAttribute("text");
		"close" === t && (this.innerHTML = `\n  <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 50 50" width="100px" height="100px"><path d="M 9.15625 6.3125 L 6.3125 9.15625 L 22.15625 25 L 6.21875 40.96875 L 9.03125 43.78125 L 25 27.84375 L 40.9375 43.78125 L 43.78125 40.9375 L 27.84375 25 L 43.6875 9.15625 L 40.84375 6.3125 L 25 22.15625 Z"/></svg>\n                <div class='button-text'>${e}</div>`), "expand" === t && (this.innerHTML = e)
	}
}
class TemplateVideo extends HTMLElement {
	constructor() {
		super();
        this.rendered = false;
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height", "src", "autoplay", "muted"]
	}

	connectedCallback() {
		if (!this.rendered) {
			this.render();
			this.rendered = true;
		}
	}
	attributeChangedCallback(name, oldValue, newValue) {
		if (oldValue !== newValue) {
			this.render();
		}
	}

	render() {
		let t = this.getAttribute("src");
		this.parent = this.closest(".expand-view-image");
		let e = this.getAttribute("width") || "300",
			i = this.getAttribute("height") || "250",
			s = "true" == this.getAttribute("autoplay") ? 1 : 0,
			n = "true" == this.getAttribute("muted") ? 1 : 0,
			o = "true" == this.getAttribute("loop") ? 1 : 0;
		if (this.addEventListener("click", (function(t) {
				t.stopPropagation()
			})), t) {
			this.innerHTML = "";
			let r = document.createElement("video");
			r.controls = !0, r.autoplay = s, r.muted = n, r.src = t, r.loop = o, this.setAttribute("type", "video"), this.style.height = i + "px", this.style.width = e + "px", this.parent && (this.parent.setAttribute("width", e + "px"), this.parent.setAttribute("height", i + "px")), this.appendChild(r)
		}
	}
}
class TemplateYoutubeVideo extends HTMLElement {
	constructor() {
		super(), 
        this.preURL = "https://www.youtube.com/embed/",
        this.rendered = false;
        
	}
	static get observedAttributes() {
		return ["id", "class", "width", "height", "video_id", "autoplay"]
	}

	connectedCallback() {
		if (!this.rendered) {
			this.render();
			this.rendered = true;
		}
	}

	attributeChangedCallback(name, oldValue, newValue) {
		if (oldValue !== newValue) {
			this.render();
		}
	}

	render() {
		let t = this.getAttribute("video_id");
		this.parent = this.closest(".ads-view");
		let e = this.getAttribute("width") || "300",
			i = this.getAttribute("height") || "250",
			s = "true" == this.getAttribute("muted") ? 1 : 0,
			n = "true" == this.getAttribute("loop") ? 1 : 0,
			o = "true" == this.getAttribute("autoplay") ? 1 : 0;
		if (t) {
			this.innerHTML = "";
			let r = document.createElement("iframe");
			r.src = `${this.preURL}${t}?autoplay=${o}&mute=${s}&loop=${n}`, this.setAttribute("type", "youtube-video"), this.style.height = i + "px", this.style.width = e + "px", r.width = e + "px", r.height = i + "px", this.parent && (this.parent.setAttribute("width", e + "px"), this.parent.setAttribute("height", i + "px")), this.appendChild(r)
		}
	}
}

function adsGenerate(t) {
	this.renderCount = 0, this.parent = t.parent || "ads-wrapper", this.view = {
		"normal-view": "#normal-view",
		"expand-view": "#expand-view"
	}, this.allView = document.querySelectorAll(".ads-view"), this.closeButton = t.closeButton || [], this.expandButton = t.expandButton || [], this.videoStyle = t.video || [], this.animation = t.animation || [], this.iframeElement = window.frameElement, this.defaultPage = "", this.isOpneOneTime = t.isOpneOneTime || !1, this.cookiesName = t.cookiesName || "small-ads", this.normalView = {
		width: "0px",
		height: "0px"
	}, this.extendView = {
		width: "0px",
		height: "0px"
	}, 
	this.openURL = null,
	this.isFirstLoad = true,
	this.parentElement = null
}
window.customElements.define("ads-wrapper", TemplateWrapper), window.customElements.define("normal-view", TemplateDefault), window.customElements.define("expand-view", TemplateExpand), window.customElements.define("ads-image", TemplateImage), window.customElements.define("ads-button", TemplateButton), window.customElements.define("ads-video", TemplateVideo), window.customElements.define("ads-youtube-video", TemplateYoutubeVideo), 
adsGenerate.prototype.init = function() {
	0 === this.renderCount && (this.renderCount += 1, this.handlerView(), this.handleStyle(), this.oneTimeOpen());
	this.getViewDimention();
}, 


adsGenerate.prototype.getViewDimention = function(){
	if(this.allView){
		this.allView.forEach((el)=>{
			let _id = el.getAttribute('id')
			if(_id === "normal-view"){
				this.normalView.height = el.getBoundingClientRect().height || 100;
				this.normalView.width = el.getBoundingClientRect().width || 300;
				
			}
			else{
				this.extendView.height = el.getBoundingClientRect().height || 250;
				this.extendView.width = el.getBoundingClientRect().width || 300;
			}
		})
	}
}

adsGenerate.prototype.getURL = function() {
	"" != this.openURL && this.openURL ? window.open(this.openURL, "_blank") : window.open("https://google.co.in", "_blank")
}, adsGenerate.prototype.getDefaltView = function() {
	let t = document.querySelector(this.parent);
	this.parentElement = t;
	if (this.defaultPage = t.getAttribute("default-view"), this.openURL = t.getAttribute("open_url"), t) {
		let e = t.querySelectorAll("ads-image");
		e.length > 0 && e.forEach((t => {
			t.addEventListener("click", (() => {
				this.getURL()
			}))
		}))
	}
	return this.view[t.getAttribute("default-view")]
},adsGenerate.prototype.on = function(t, e, i) {
    let s = document.querySelector(e);
    if (s) {
        s.addEventListener(t, (event) => {
            if (event.isTrusted) {
                this.isFirstLoad = false;
                i(event); // fired user define function 
            } 
        });
    }
}, 
adsGenerate.prototype.removeView = function() {
	this.allView.length > 0 && this.allView.forEach((t => {
		t.classList.remove("active")
	}))
}, adsGenerate.prototype.handlerView = function() {
	let t = document.querySelector(this.getDefaltView());
	t && t.classList.add("active"), !1 === this.isOpneOneTime && this.iframe(this.defaultPage)
}, 

adsGenerate.prototype.transition = function (t, el) {
    return new Promise((resolve) => {
        if (this.isFirstLoad) {
            resolve("First load, skipping animation.");
            return;
        }

        const parent = this.parentElement;
        if (!parent) {
            resolve("No parent element found.");
            return;
        }

		const onTransitionEnd = (event) => {
            if (event.propertyName === "width" || event.propertyName === "height") {
                parent.removeEventListener("transitionend", onTransitionEnd);
                console.log("Transition completed");
                resolve("Animation completed");
            }
        };

		if(t === "expand-view"){resolve("Animation completed normal");}
		else{parent.addEventListener("transitionend", onTransitionEnd);}

    });
};



adsGenerate.prototype.gotoPage = function(t) {
	let e = document.querySelector(this.view[t]);
	if (this.parentElement) {
        this.parentElement.offsetHeight; 
        this.parentElement.style.width = (t === "normal-view" ? this.normalView.width : this.extendView.width) + 'px';
        this.parentElement.style.height = (t === "normal-view" ? this.normalView.height : this.extendView.height) + 'px';
    }
	this.transition(t, e).then(() => {
		this.removeView();
		e && e.classList.add("active");
        this.iframe(t);
    }).catch((error) => {
        console.error("Error:", error);
    });
}, 

adsGenerate.prototype.getElement = function(t) {
	return document.querySelector(t)
}, adsGenerate.prototype.cssPos = function(t, e) {
	switch (e.position) {
		case "top-left":
			t.style.top = e.positionStyle.top || "0px", t.style.left = e.positionStyle.left || "0px";
			break;
		case "top-right":
			t.style.top = e.positionStyle.top || "0px", t.style.right = e.positionStyle.right || "0px";
			break;
		case "bottom-left":
			t.style.bottom = e.positionStyle.bottom || "0px", t.style.left = e.positionStyle.left || "0px";
			break;
		case "bottom-right":
			t.style.bottom = e.positionStyle.bottom || "0px", t.style.right = e.positionStyle.right || "0px";
			break;
		case "top-center":
			t.style.top = e.positionStyle.top || "0px", t.style.left = "50%", t.style.transform = "translate(-50%,0%)";
			break;
		case "bottom-center":
			t.style.bottom = e.positionStyle.bottom || "0px", t.style.left = "50%", t.style.transform = "translate(-50%,0%)"
	}
}, adsGenerate.prototype.manageStyle = function(t, e) {
	if ("expand" === e && (this.expandButton.hasOwnProperty("text") && t.setAttribute("text", this.expandButton.text), this.expandButton.hasOwnProperty("padding") && (t.style.padding = this.expandButton.padding), this.expandButton.hasOwnProperty("backgroundColor") && (t.style.backgroundColor = this.expandButton.backgroundColor), this.expandButton.hasOwnProperty("color") && (t.style.color = this.expandButton.color), this.expandButton.hasOwnProperty("position") && this.cssPos(t, this.expandButton), this.expandButton.hasOwnProperty("fontSize") && (t.style.fontSize = this.expandButton.fontSize)), "close" === e) {
		this.expandButton.hasOwnProperty("text") && t.setAttribute("text", this.closeButton.text), this.expandButton.hasOwnProperty("padding") && (t.style.padding = this.closeButton.padding), this.expandButton.hasOwnProperty("backgroundColor") && (t.style.backgroundColor = this.closeButton.backgroundColor), this.expandButton.hasOwnProperty("color") && (t.style.color = this.closeButton.color), this.expandButton.hasOwnProperty("position") && this.cssPos(t, this.closeButton), this.expandButton.hasOwnProperty("fontSize") && (t.style.fontSize = this.closeButton.fontSize);
		let e = t.querySelector("svg");
		e && (e.style.width = this.closeButton.svgWidth, e.style.height = this.closeButton.svgHeight, e.style.fill = this.closeButton.svgColor)
	}
	"video" !== e && "youtube" !== e || this.videoStyle.hasOwnProperty("position") && this.cssPos(t, this.videoStyle)
}, adsGenerate.prototype.handleStyle = function() {
	let t = this.getElement(this.parent),
		e = t.querySelector("#close-button"),
		i = t.querySelector("#expand_button"),
		s = t.querySelector("ads-video"),
		n = t.querySelector("ads-youtube-video");
	e && this.manageStyle(e, "close"), i && this.manageStyle(i, "expand"), s && this.manageStyle(s, "video"), n && this.manageStyle(n, "youtube");
	this.parentElement && (this.parentElement.style.transitionDelay = this.animation.delay, t.style.transitionDuration = this.animation.timing);
	

}, adsGenerate.prototype.iframe = async function(t) {
	if (console.log(t), this.iframeElement) {
		this.iframeElement.setAttribute("scrolling", "no");
		let e = document.querySelector(this.view[t]).querySelector("ads-image img").getAttribute("src"),
			i = new Image;
		i.src = e, i.addEventListener("load", (() => {
			this.iframeElement.style.width = i.width + "px", this.iframeElement.style.height = i.height + "px", this.iframeElement.style.border = "0px", this.iframeElement.style.transitionDelay = this.animation.delay, this.iframeElement.style.transitionDuration = this.animation.timing
		}))
	}
}, adsGenerate.prototype.setCookie = function(t, e, i) {
	const s = new Date;
	s.setTime(s.getTime() + 24 * i * 60 * 60 * 1e3);
	let n = "expires=" + s.toUTCString();
	document.cookie = t + "=" + e + ";" + n + ";path=/"
}, adsGenerate.prototype.check_cookie_name = async function(t) {
	var e = document.cookie.match(new RegExp("(^| )" + t + "=([^;]+)"));
	return e ? e[2] : (this.setCookie(this.cookiesName, 1, 1), null)
}, adsGenerate.prototype.oneTimeOpen = async function() {
	if (!0 === this.isOpneOneTime)
		if (console.log("Cookies :- ", "cookies is enable"), null !== this.check_cookie_name(this.cookiesName)) {
			var t = await this.check_cookie_name(this.cookiesName);
			if (1 === Number(t)) {
				var e = Number(t) + 1;
				this.setCookie(this.cookiesName, e, 1), this.gotoPage("expand-view"), this.isFirstLoad = true
			} else this.gotoPage("normal-view"), this.isFirstLoad = true
		} else {
			t = await this.check_cookie_name(this.cookiesName), e = Number(t) + 1;
			this.setCookie(this.cookiesName, e, 1), this.gotoPage("expand-view"), this.isFirstLoad = true
		}
};